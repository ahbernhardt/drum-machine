{"version":3,"sources":["components/Sounds/Sounds.js","components/DrumPad/DrumPad.js","components/DrumPadHolder/DrumPadHolder.js","classes/Key.js","components/Controller/Controller.js","components/Display/Display.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Sounds","kitOne","code","name","text","url","kitTwo","DrumPad","props","componentDidMount","window","addEventListener","handleKeyPress","state","isActivated","bind","play","this","power","drumPad","updateDisplay","setState","audio","Audio","document","getElementById","currentTime","volume","setTimeout","duration","e","keyCode","removeEventListener","classes","classNames","id","className","key","onClick","class","src","Component","DrumPadHolder","kit","map","i","Key","Controller","type","checked","onChange","updatePower","min","max","value","updateVolume","updateKit","Display","display","Footer","href","target","rel","App","currentKit","ret","sounds","forEach","button","push","getKit","prevProps","prevState","role","aria-label","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68471cb5.chunk.js","sourcesContent":["const kitOne = [{\n    code: 81,\n    name: 'Q',\n    text: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n}, {\n    code: 87,\n    name: 'W',\n    text: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n}, {\n    code: 69,\n    name: 'E',\n    text: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n}, {\n    code: 65,\n    name: 'A',\n    text: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n}, {\n    code: 83,\n    name: 'S',\n    text: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n    code: 68,\n    name: 'D',\n    text: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n    code: 90,\n    name: 'Z',\n    text: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n    code: 88,\n    name: 'X',\n    text: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n}, {\n    code: 67,\n    name: 'C',\n    text: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n},\n];\n\nconst kitTwo = [{\n    code: 81,\n    name: 'Q',\n    text: 'Chord-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n}, {\n    code: 87,\n    name: 'W',\n    text: 'Chord-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n}, {\n    code: 69,\n    name: 'E',\n    text: 'Chord-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n}, {\n    code: 65,\n    name: 'A',\n    text: 'Shaker',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n}, {\n    code: 83,\n    name: 'S',\n    text: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n}, {\n    code: 68,\n    name: 'D',\n    text: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n}, {\n    code: 90,\n    name: 'Z',\n    text: 'Punchy-Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n}, {\n    code: 88,\n    name: 'X',\n    text: 'Side-Stick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n}, {\n    code: 67,\n    name: 'C',\n    text: 'Snare',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n}\n];\n\nconst Sounds = {\n    kitOne, kitTwo\n}\n\nexport default Sounds;\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport './DrumPad.css'\nclass DrumPad extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isActivated: false\n        }\n\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.play = this.play.bind(this);\n    }\n\n    play() {\n        if (this.props.power) {\n            const { drumPad, updateDisplay } = this.props;\n            this.setState({\n                isActivated: false\n            })\n            let audio = new Audio();\n            audio = document.getElementById(drumPad.name);\n            audio.currentTime = 0;\n            audio.volume = this.props.volume / 100;\n            audio.play();\n            this.setState({\n                isActivated: true\n            })\n            setTimeout(() => this.setState({ isActivated: false}), audio.duration*1000);\n            updateDisplay(drumPad.text);\n        }\n    }\n\n    handleKeyPress(e) {\n        if (e.keyCode === this.props.drumPad.code) {\n            this.play();\n        }\n    }\n\n    componentDidMount = () => {\n        window.addEventListener(\"keydown\", this.handleKeyPress);\n    };\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.handleKeyPress);\n    }\n\n    render() {\n        const { drumPad } = this.props;\n        let classes = classNames({\n            'drum-pad': true,\n            'onclick': this.state.isActivated,\n            'normal': !this.state.isActivated\n        });\n\n        return (\n            <div id={drumPad.text} className={classes} key={drumPad.text} onClick={() => this.play()}>\n                <audio class=\"clip\" id={drumPad.name} src={drumPad.url} />\n                <span>{drumPad.name}</span>\n            </div>\n        );\n    }\n}\n\nexport default DrumPad;\n","import React, { Component } from 'react';\nimport './DrumPadHolder.css'\nimport DrumPad from '../DrumPad/DrumPad'\n\nclass DrumPadHolder extends Component {\n    render() {\n        let kit = this.props.kit.map((drumPad,i) => {\n            return (\n                <DrumPad\n                    drumPad={drumPad}\n                    updateDisplay={(text) => this.props.updateDisplay(text)}\n                    volume={this.props.volume}\n                    power={this.props.power}\n                    key={\"drumPad-\"+i}\n                />\n            );\n        });\n\n        return (\n\n            <div id=\"drum-pad-holder\">\n                {kit}\n            </div>\n\n        );\n    }\n}\n\nexport default DrumPadHolder;\n","class Key {\n  constructor (code, name, text, url) {\n    this.code = code;\n    this.name = name;\n    this.text = text;\n    this.url = url;\n  }\n}\n\nexport default Key;","import React, { Component } from 'react';\nimport './Controller.css'\n\nclass Controller extends Component {\n    render() {\n        return (\n            <div className=\"switches-container\">\n                <div className=\"power-section\">\n                    <span className=\"switch-name\">Power</span>\n                    <label className=\"switch\">\n                        <input\n                            type=\"checkbox\"\n                            checked={this.props.power}\n                            onChange={this.props.updatePower}\n                        />\n                        <span className=\"switch-slider\"/>\n                    </label>\n                </div>\n                <div className=\"volume-section\">\n                    <span className=\"switch-name\">Volume</span>\n                    <input type=\"range\" min=\"1\" max=\"100\" value={this.props.volume}\n                           className=\"slider\" id=\"volume\" onChange={this.props.updateVolume} />\n                </div>\n                <div className=\"kit-section\">\n                <span className=\"switch-name\">Kit</span>\n                <label className=\"switch\">\n                    <input type=\"checkbox\" checked={this.props.kit} onChange={this.props.updateKit} />\n                    <span className=\"switch-slider\"/>\n                </label>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Controller;\n","import React, { Component } from 'react';\nimport './Display.css'\nclass Display extends Component {\n    render() {\n        return (\n            <div id=\"display\" className=\"display-panel\">\n                <span className=\"text\">{this.props.display}</span>\n            </div>\n        );\n    }\n}\n\nexport default Display;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <p>\n            Anh Nguyen © 2020\n            <span> <span> </span>| </span>\n            <span>\n                Repo Link: {'  '}\n                <a className=\"footer-link\" href=\"https://github.com/anguyen0208/fcc-drum-machine\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <i className=\"fab fa-github\" />\n                </a>\n            </span>\n        </p>\n    </footer>\n);\n\nexport default Footer;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport sounds from './components/Sounds/Sounds';\nimport DrumPadHolder from './components/DrumPadHolder/DrumPadHolder';\nimport Key from './classes/Key';\nimport Controller from './components/Controller/Controller';\nimport Display from './components/Display/Display';\nimport Footer from './components/Footer/Footer';\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      kit: [],\n      power: true,\n      display: '',\n      currentKit: 'kitOne',\n      volume: 50,\n    }\n\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.updateVolume = this.updateVolume.bind(this);\n    this.updateKit = this.updateKit.bind(this);\n    this.updatePower = this.updatePower.bind(this);\n\n  }\n\n  updateDisplay(text) {\n    this.setState({\n      display: text\n    })\n  }\n\n  updateVolume(e) {\n    if (this.state.power) {\n      this.setState({\n        volume: e.target.value\n      })\n      this.updateDisplay(\"Volume: \" + e.target.value);\n    }\n  }\n\n  updatePower(e) {\n    this.setState({\n      power: e.target.checked\n    })\n    let text = e.target.checked ? \"On\" : \"Off\";\n    this.updateDisplay(\"Power: \"+text);\n    if (!e.target.checked) {\n      setTimeout(() => this.updateDisplay(\"\"), 1000);\n    }\n  }\n\n  updateKit(e) {\n    if (this.state.power) {\n      let kit = !e.target.checked ? 'kitOne' : 'kitTwo';\n      let text = !e.target.checked ? 'Heater Kit' : 'Smoth Piano Kit';\n      this.setState({\n        currentKit: kit\n      })\n      this.updateDisplay(text);\n    }\n  }\n\n  getKit(kit) {\n\n    let ret = [];\n    sounds[kit].forEach(button => ret.push( new Key(button.code, button.name, button.text, button.url) ));\n    return ret;\n\n  }\n\n  componentDidMount() {\n\n    this.setState({\n      kit: this.getKit(this.state.currentKit)\n    })\n\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.currentKit !== this.state.currentKit) {\n      this.setState({\n        kit: this.getKit(this.state.currentKit)\n      })\n    }\n  }\n\n\n  render() {\n    const { kit, display, volume, power, currentKit  } = this.state;\n    return (\n      <main >\n        <h1 className=\"text-content\">FCC: Drum Machine <span role=\"img\" aria-label=\"control\"> 🎛️</span></h1>\n        <div className=\"container\">\n          <div className=\"machine\" id=\"drum-machine\">\n            <Display display={display} />\n            <DrumPadHolder\n              kit={kit}\n              updateDisplay={text => this.updateDisplay(text)}\n              volume={volume}\n              power={power}\n            />\n            <Controller\n              volume={volume}\n              power={power}\n              kit={currentKit !== 'kitOne'}\n              updateVolume={this.updateVolume}\n              updatePower={this.updatePower}\n              updateKit={this.updateKit}\n            />\n          </div>\n        </div>\n        <Footer/>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}